(function () {
  const data = window.GravBlogshortcut || {};
  const destination = data.link || '';
  const parentRoute = data.parent_route || '';
  const blueprint = data.blueprint || '';
  const label = data.button_label || '';
  const parentLabel = data.parent_label || parentRoute || '/';
  const parentTitle = data.parent_title || '';
  const STORAGE_KEY = 'grav-blogshortcut-payload';

  function savePayload() {
    try {
      const payload = {
        parent: parentRoute,
        blueprint: blueprint,
        parentLabel: parentLabel,
        parentTitle: parentTitle
      };
      window.sessionStorage.setItem(STORAGE_KEY, JSON.stringify(payload));
    } catch (err) {
      // sessionStorage may be unavailable, ignore errors.
    }
  }

  function redirect(event) {
    if (!destination) {
      return;
    }

    if (event) {
      event.preventDefault();
    }

    savePayload();
    window.location.href = destination;
  }

  function isBlogshortcutLink(anchor) {
    if (!anchor) {
      return false;
    }

    if (anchor.dataset.blogshortcutTrigger === '1') {
      return true;
    }

    if (anchor.querySelector('.blogshortcut-icon')) {
      return true;
    }

    if (label) {
      const labelElement = anchor.querySelector('em');
      if (labelElement && labelElement.textContent.trim() === label) {
        return true;
      }
    }

    return false;
  }

  document.addEventListener('click', function (event) {
    const anchor = event.target.closest('a');
    if (!anchor) {
      return;
    }

    if (isBlogshortcutLink(anchor)) {
      redirect(event);
    }
  });

  function dispatchChange(field) {
    const changeEvent = new Event('change', { bubbles: true });
    field.dispatchEvent(changeEvent);
  }

  function selectizeSet(field, value) {
    if (!field || !value) {
      return;
    }

    if (window.jQuery) {
      const $field = window.jQuery(field);
      const selectize = field.selectize || ($field.data ? $field.data('selectize') : null);

      if (selectize && typeof selectize.setValue === 'function') {
        selectize.setValue(value, true);
        return;
      }
    }

    field.value = value;
    dispatchChange(field);
  }

  function setParentField(field, payload) {
    if (!field || !payload.parent) {
      return;
    }

    field.value = payload.parent;
    dispatchChange(field);

    const wrapper = field.closest('.parents-wrapper');
    if (!wrapper) {
      return;
    }

    const fieldLabel = wrapper.querySelector('[data-parents-field-label]');
    const fieldName = wrapper.querySelector('[data-parents-field-name]');

    if (fieldLabel && payload.parentLabel) {
      fieldLabel.textContent = payload.parentLabel;
    }

    if (fieldName && payload.parentTitle) {
      fieldName.textContent = payload.parentTitle;
    }
  }

  function openModal(payload) {
    if (!payload) {
      return;
    }

    const modalElement = document.querySelector('[data-remodal-id="modal"]');
    if (!modalElement) {
      return;
    }

    const openInstance = function () {
      let instance = null;

      if (window.jQuery && typeof window.jQuery(modalElement).remodal === 'function') {
        instance = window.jQuery(modalElement).remodal();
      }

      if (instance && typeof instance.open === 'function') {
        instance.open();
      } else {
        modalElement.classList.add('remodal-is-opened');
      }

      const routeField = document.querySelector('form#blueprints select[name="data[route]"]') || document.querySelector('form#blueprints input[name="data[route]"]');
      const nameField = document.querySelector('form#blueprints select[name="data[name]"]');

      if (routeField && payload.parent) {
        if (routeField.tagName === 'SELECT') {
          selectizeSet(routeField, payload.parent);
        } else {
          setParentField(routeField, payload);
        }
      }

      if (nameField && payload.blueprint) {
        const applyTemplate = function () {
          selectizeSet(nameField, payload.blueprint);
        };

        if (routeField && payload.parent) {
          window.setTimeout(applyTemplate, 200);
        } else {
          applyTemplate();
        }
      }

      const titleField = document.querySelector('form#blueprints input[name="data[title]"]');
      if (titleField && !titleField.value) {
        titleField.focus();
      }
    };

    window.setTimeout(openInstance, 100);
  }

  function processPayloadIfNeeded() {
    if (!destination) {
      return;
    }

    let payload = null;

    try {
      const stored = window.sessionStorage.getItem(STORAGE_KEY);
      payload = stored ? JSON.parse(stored) : null;
    } catch (err) {
      payload = null;
    }

    if (!payload) {
      return;
    }

    try {
      window.sessionStorage.removeItem(STORAGE_KEY);
    } catch (err) {
      // ignore
    }

    if (!document.querySelector('[data-remodal-id="modal"]')) {
      return;
    }

    if (!payload.parent && parentRoute) {
      payload.parent = parentRoute;
    }

    if (!payload.parentLabel && parentLabel) {
      payload.parentLabel = parentLabel;
    }

    if (!payload.parentTitle && parentTitle) {
      payload.parentTitle = parentTitle;
    }

    if (!payload.blueprint && blueprint) {
      payload.blueprint = blueprint;
    }

    openModal(payload);
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', processPayloadIfNeeded);
  } else {
    processPayloadIfNeeded();
  }
})();
